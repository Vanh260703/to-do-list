<!DOCTYPE html>
<html lang="vi">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Dashboard To-do List</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" />
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet" />
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
    :root {
      --primary-color: #6366f1;
      --success-color: #10b981;
      --warning-color: #f59e0b;
      --danger-color: #ef4444;
      --info-color: #3b82f6;
      --card-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
      --card-hover-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
      --border-radius: 12px;
    }

    body {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      min-height: 100vh;
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
    }

    .dashboard-container {
      background: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(10px);
      border-radius: var(--border-radius);
      box-shadow: var(--card-shadow);
      margin: 2rem auto;
      padding: 2rem;
    }

    .dashboard-title {
      background: linear-gradient(135deg, var(--primary-color), var(--info-color));
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
      font-weight: 800;
      font-size: 2.5rem;
      text-align: center;
      margin-bottom: 2rem;
    }

    .metric-card {
      background: white;
      border-radius: var(--border-radius);
      box-shadow: var(--card-shadow);
      border: none;
      transition: all 0.3s ease;
      height: 100%;
    }

    .metric-card:hover {
      transform: translateY(-2px);
      box-shadow: var(--card-hover-shadow);
    }

    .card-header {
      background: transparent;
      border-bottom: 2px solid #f1f5f9;
      padding: 1.5rem 1.5rem 1rem;
    }

    .card-title {
      font-weight: 600;
      font-size: 1.1rem;
      color: #334155;
      display: flex;
      align-items: center;
      gap: 0.5rem;
      margin: 0;
    }

    .progress-comparison {
      background: linear-gradient(135deg, #e0e7ff 0%, #f0f9ff 100%);
      border-radius: 8px;
      padding: 1rem;
      margin-bottom: 1.5rem;
      border-left: 4px solid var(--primary-color);
    }

    .comparison-text {
      font-size: 0.9rem;
      font-weight: 500;
      margin: 0;
    }

    .comparison-positive {
      color: var(--success-color);
    }

    .comparison-negative {
      color: var(--danger-color);
    }

    .comparison-neutral {
      color: #64748b;
    }

    .summary-card {
      background: white;
      border-radius: var(--border-radius);
      box-shadow: var(--card-shadow);
      transition: all 0.3s ease;
      border: none;
      height: 100%;
    }

    .summary-card:hover {
      transform: translateY(-4px);
      box-shadow: var(--card-hover-shadow);
    }

    .summary-card-body {
      padding: 2rem;
      text-align: center;
    }

    .summary-icon {
      font-size: 2.5rem;
      margin-bottom: 1rem;
    }

    .summary-count {
      font-size: 2rem;
      font-weight: 700;
      margin: 0.5rem 0;
    }

    .summary-label {
      font-size: 1rem;
      font-weight: 600;
      color: #64748b;
      margin-bottom: 0.5rem;
    }

    .summary-progress {
      font-size: 0.875rem;
      color: #64748b;
      margin-bottom: 1.5rem;
    }

    .btn-custom {
      border-radius: 8px;
      font-weight: 500;
      padding: 0.5rem 1.5rem;
      transition: all 0.3s ease;
      border: 2px solid;
    }

    .btn-custom:hover {
      transform: translateY(-1px);
    }

    .chart-container {
      position: relative;
      height: 250px;
    }

    @media (max-width: 768px) {
      .dashboard-title {
        font-size: 2rem;
      }
      
      .dashboard-container {
        margin: 1rem;
        padding: 1.5rem;
      }
      
      .progress-comparison {
        text-align: center;
      }
    }
  </style>
</head>
<body>
  <div class="container-fluid">
    <div class="dashboard-container">
      <h1 class="dashboard-title">
        <i class="fas fa-chart-line me-2"></i>
        Dashboard Quản Lý Công Việc
      </h1>

      <!-- Analytics Cards -->
      <div class="row g-4 mb-5">
        <div class="col-lg-6">
          <div class="metric-card">
            <div class="card-header">
              <h5 class="card-title">
                <i class="fas fa-chart-pie text-primary"></i>
                Tổng Quan Công Việc
              </h5>
            </div>
            <div class="card-body">
              <div class="chart-container">
                <canvas id="completionChart"></canvas>
              </div>
            </div>
          </div>
        </div>
        
        <div class="col-lg-6">
          <div class="metric-card">
            <div class="card-header">
              <h5 class="card-title">
                <i class="fas fa-chart-bar text-info"></i>
                So Sánh Hiệu Suất
              </h5>
            </div>
            <div class="card-body">
              <div class="progress-comparison">
                <p class="comparison-text" id="compare-message">
                  <i class="fas fa-spinner fa-spin me-2"></i>
                  Đang tính toán...
                </p>
              </div>
              <div class="chart-container">
                <canvas id="compareChart"></canvas>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Summary Cards -->
      <div class="row g-4" id="summaryCards">
        {{#each tasksSummary}}
        <div class="col-lg-4 col-md-6">
          <div class="summary-card">
            <div class="summary-card-body">
              <div class="summary-icon text-{{this.theme}}">
                {{this.icon}}
              </div>
              <div class="summary-label">{{this.label}}</div>
              <div class="summary-count text-{{this.theme}}">{{this.count}}</div>
              <div class="summary-progress">
                {{CheckCompletedTask this.completed this.count}}
              </div>
              <a href="{{this.route}}" class="btn btn-outline-{{this.theme}} btn-custom">
                <i class="fas fa-eye me-2"></i>Xem Chi Tiết
              </a>
            </div>
          </div>
        </div>
        {{/each}}
      </div>
    </div>
  </div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
<script>
class DashboardAnalytics {
  constructor() {
    this.chartOptions = {
      responsive: true,
      maintainAspectRatio: false,
      plugins: {
        legend: {
          position: 'bottom',
          labels: {
            padding: 20,
            usePointStyle: true,
            font: {
              family: 'Inter',
              size: 12
            }
          }
        },
        tooltip: {
          backgroundColor: 'rgba(0, 0, 0, 0.8)',
          titleFont: { family: 'Inter', size: 14 },
          bodyFont: { family: 'Inter', size: 13 },
          cornerRadius: 8
        }
      }
    };
    
    this.init();
  }

  init() {
    document.addEventListener('DOMContentLoaded', () => {
      this.loadData();
      this.renderCharts();
      this.updateComparisonMessage();
    });
  }

  loadData() {
    // In a real application, this would fetch from an API
    this.data = {
      percentThisMonth: {{percentThisMonth}} || 75,
      percentLastMonth: {{percentLastMonth}} || 60,
      completedTasks: {{totalCompleted}} || 18,
      uncompletedTasks: {{totalUncompleted}} || 6
    };
  }

  updateComparisonMessage() {
    const { percentThisMonth, percentLastMonth } = this.data;
    const percentDiff = Math.abs(percentThisMonth - percentLastMonth);
    const compareMessage = document.getElementById('compare-message');
    
    if (!compareMessage) return;

    let icon, text, className;
    
    if (percentThisMonth > percentLastMonth) {
      icon = 'fas fa-trend-up';
      text = `Tăng ${percentDiff}% so với tháng trước`;
      className = 'comparison-positive';
    } else if (percentThisMonth < percentLastMonth) {
      icon = 'fas fa-trend-down';
      text = `Giảm ${percentDiff}% so với tháng trước`;
      className = 'comparison-negative';
    } else {
      icon = 'fas fa-equals';
      text = `Không thay đổi (${percentThisMonth}%)`;
      className = 'comparison-neutral';
    }

    compareMessage.innerHTML = `<i class="${icon} me-2"></i>${text}`;
    compareMessage.className = `comparison-text ${className}`;
  }

  renderCharts() {
    this.renderCompletionChart();
    this.renderComparisonChart();
  }

  renderCompletionChart() {
    const ctx = document.getElementById('completionChart');
    if (!ctx) return;

    new Chart(ctx, {
      type: 'doughnut',
      data: {
        labels: ['Đã Hoàn Thành', 'Đang Thực Hiện'],
        datasets: [{
          data: [this.data.completedTasks, this.data.uncompletedTasks],
          backgroundColor: [
            'rgba(16, 185, 129, 0.8)',
            'rgba(245, 158, 11, 0.8)'
          ],
          borderColor: [
            'rgba(16, 185, 129, 1)',
            'rgba(245, 158, 11, 1)'
          ],
          borderWidth: 2,
          hoverBackgroundColor: [
            'rgba(16, 185, 129, 0.9)',
            'rgba(245, 158, 11, 0.9)'
          ]
        }]
      },
      options: {
        ...this.chartOptions,
        cutout: '60%',
        plugins: {
          ...this.chartOptions.plugins,
          tooltip: {
            ...this.chartOptions.plugins.tooltip,
            callbacks: {
              label: (context) => {
                const total = context.dataset.data.reduce((a, b) => a + b, 0);
                const percentage = ((context.raw / total) * 100).toFixed(1);
                return `${context.label}: ${context.raw} việc (${percentage}%)`;
              }
            }
          }
        }
      }
    });
  }

  renderComparisonChart() {
    const ctx = document.getElementById('compareChart');
    if (!ctx) return;

    new Chart(ctx, {
      type: 'bar',
      data: {
        labels: ['Tháng Trước', 'Tháng Này'],
        datasets: [{
          label: 'Tỷ lệ hoàn thành (%)',
          data: [this.data.percentLastMonth, this.data.percentThisMonth],
          backgroundColor: [
            'rgba(96, 165, 250, 0.8)',
            'rgba(52, 211, 153, 0.8)'
          ],
          borderColor: [
            'rgba(96, 165, 250, 1)',
            'rgba(52, 211, 153, 1)'
          ],
          borderWidth: 2,
          borderRadius: 8,
          borderSkipped: false,
        }]
      },
      options: {
        ...this.chartOptions,
        scales: {
          y: {
            beginAtZero: true,
            max: 100,
            ticks: {
              stepSize: 20,
              callback: (value) => value + '%',
              font: { family: 'Inter', size: 11 }
            },
            grid: {
              color: 'rgba(148, 163, 184, 0.1)'
            }
          },
          x: {
            ticks: {
              font: { family: 'Inter', size: 11 }
            },
            grid: {
              display: false
            }
          }
        },
        plugins: {
          legend: { display: false },
          tooltip: {
            ...this.chartOptions.plugins.tooltip,
            callbacks: {
              label: (context) => `${context.parsed.y}% hoàn thành`
            }
          }
        }
      }
    });
  }
}

// Initialize Dashboard
new DashboardAnalytics();
</script>

</body>
</html>